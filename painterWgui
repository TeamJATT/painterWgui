from time import *
from tkinter import *
import cv2
import numpy as np
import time
import os
import HandTrackingModule as htm #change "HandTrackingModule" for whatever you name the hand tracking file


def close():
    ws.destroy()

def start():
    #######################
    brushThickness = 10
    eraserThickness = 100
    ########################

    pTime = 0
    cTime = 0

    folderPath = "Header"
    myList = os.listdir(folderPath)
    print(myList)
    overlayList = []  # contain images that we want to overlay
    for imPath in myList:
        image = cv2.imread(f'{folderPath}/{imPath}')  # f= string
        overlayList.append(image)
    print(len(overlayList))
    header = overlayList[0]
    drawColor = (87, 201, 0)  # default initial color (blue, green, red)

    cap = cv2.VideoCapture(0)  # runs webcam
    cap.set(3, 1280)  # width
    cap.set(4, 720)  # height

    detector = htm.handDetector(detectionCon=0.85, maxHands=1)
    xp, yp = 0, 0
    imgCanvas = np.zeros((720, 1280, 3), np.uint8)

    while True:

        # 1. Import image
        success, img = cap.read()
        img = cv2.flip(img, 1)

        # 2. Find Hand Landmarks
        img = detector.findHands(img)
        lmList = detector.findPosition(img, draw=False)

        if len(lmList) != 0:
            # print(lmList)  # will print the landmarks of hand

            # tip of index and middle fingers
            x1, y1 = lmList[8][1:]  # landmark for index finger
            x2, y2 = lmList[12][1:]  # "         "  middle "

            # 3. Check which fingers are up
            fingers = detector.fingersUp()
            # print(fingers)

            # 4. If Selection Mode - Two finger are up
            if fingers[1] and fingers[2]:
                xp, yp = 0, 0
                print("Selection Mode")
                # # Checking for the click
                if y1 < 125:
                    if 300 < x1 < 400:
                        header = overlayList[0]
                        drawColor = (87, 201, 0)
                    elif 450 < x1 < 650:
                        header = overlayList[1]
                        drawColor = (255, 0, 0)
                    elif 700 < x1 < 850:
                        header = overlayList[2]
                        drawColor = (147, 20, 255)
                    elif 950 < x1 < 1200:
                        header = overlayList[3]
                        drawColor = (0, 0, 0)
                cv2.rectangle(img, (x1, y1 - 25), (x2, y2 + 25), drawColor, cv2.FILLED)

            # 5. If Drawing Mode - Index finger is up
            if fingers[1] and fingers[2] == False:
                cv2.circle(img, (x1, y1), 15, drawColor, cv2.FILLED)
                print("Drawing Mode")
                if xp == 0 and yp == 0:  # first frame detected, start drawing
                    xp, yp = x1, y1

                if drawColor == (0, 0, 0):
                    cv2.line(img, (xp, yp), (x1, y1), drawColor, eraserThickness)
                    cv2.line(imgCanvas, (xp, yp), (x1, y1), drawColor, eraserThickness)

                else:
                    cv2.line(img, (xp, yp), (x1, y1), drawColor, brushThickness)
                    cv2.line(imgCanvas, (xp, yp), (x1, y1), drawColor, brushThickness)

                xp, yp = x1, y1

            # # Clear Canvas when all fingers are up
            # if all (x >= 1 for x in fingers):
            #     imgCanvas = np.zeros((720, 1280, 3), np.uint8)

        imgGray = cv2.cvtColor(imgCanvas, cv2.COLOR_BGR2GRAY)
        _, imgInv = cv2.threshold(imgGray, 50, 255, cv2.THRESH_BINARY_INV)
        imgInv = cv2.cvtColor(imgInv, cv2.COLOR_GRAY2BGR)
        img = cv2.bitwise_and(img, imgInv)  # and adds the inverse image and the img
        img = cv2.bitwise_or(img, imgCanvas)  # or adds the canvas and img to output the colors

        cTime = time.time()
        fps = 1 / (cTime - pTime)
        pTime = cTime

        # Setting the header image
        img[0:125, 0:1280] = header
        # img = cv2.addWeighted(img,0.5,imgCanvas,0.5,0)
        # cv2.putText(img, str(int(fps)), (10, 70), cv2.FONT_HERSHEY_PLAIN, 3,(255, 0, 255), 3)
        cv2.imshow("Image", img)
        # cv2.imshow("Canvas", imgCanvas)
        # cv2.imshow("Inv", imgInv)
        cv2.waitKey(1)



ws = Tk()
ws.title("Hand Tracking")
ws.geometry('500x300')
ws['bg']='#5d8a82'

#lbl = Label(ws, text="Start Hand Tracking")
#lbl.grid(column=0, row=0)

#lbl = Label(ws, text="Stop Program")
#lbl.grid(column=0, row=1)

btn1 = Button(ws, text = "START HAND TRACKING", font = ("Times", 14), command = start )
btn1.place(x = 130, y = 10)
#btn1.grid(column=1, row=0)
btn2 = Button(ws, text = "CLOSE PROGRAM", font = ("Times", 14), command = close )
btn2.place(x = 160, y = 60)
#btn2.grid(column=1, row=1)
ws.mainloop()
